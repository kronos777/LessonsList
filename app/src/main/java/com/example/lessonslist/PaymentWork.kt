package com.example.lessonslist

import android.app.Application
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import android.util.Log
import android.widget.Toast
import androidx.core.app.NotificationCompat
import androidx.lifecycle.*
import androidx.work.CoroutineWorker
import androidx.work.Worker
import androidx.work.WorkerParameters
import com.example.lessonslist.data.AppDatabase
import com.example.lessonslist.data.lessons.LessonsItemDbModel
import com.example.lessonslist.domain.lessons.GetLessonsItemUseCase
import com.example.lessonslist.domain.lessons.GetLessonsListItemUseCase
import com.example.lessonslist.domain.lessons.LessonsItem
import com.example.lessonslist.presentation.lessons.LessonsItemViewModel
import com.example.lessonslist.presentation.lessons.LessonsListViewModel
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class PaymentWork(
    appContext: Context, params: WorkerParameters

) : CoroutineWorker(
    appContext,
    params
) {
  //  private lateinit var viewLifecycleOwner: LifecycleOwner
 //   private var dataLessonsList: LessonsListViewModel = LessonsListViewModel(applicationContext as Application)
  private val appDatabase = AppDatabase


    override suspend fun doWork(): Result {
        val db = appDatabase.getInstance(applicationContext as Application).LessonsListDao().getLessonsList()
        db.observe(applicationContext) {
            for (item in it) {
                log(item.student)
            }
        }
        /*dataLessonsList.lessonsList.observe(this) {
            for(lessons in it){
                Log.d("lesList", lessons.title)
            }
        }*/
        /*val db = AppDatabase.getInstance(applicationContext as Application)
        var less = db.LessonsListDao().getLessonsList()
        less.observe(viewLifecycleOwner) {


        }*/
//Log.d("lesList", it.toString())
    //    viewLifecycleOwner = ViewModelProvider(this)[LessonsListViewModel::class.java]
      /*  dataLessonsList.lessonsList.observe(viewLifecycleOwner) {
            for(lessons in it){
                Log.d("lesList", lessons.title)
            }
        }
*/
        //Log.d("lesList", dataLessonsList.lessonsList.value.toString())

        createNotification("Background Task", "This notification is generated by workManager")

        return Result.success()
      //  Log.d("lesList", less.toString())

    }


    private fun log(message: String) {
        Log.d("SERVICE_TAG", "PaymentService: $message")
    }


    private fun createNotification(title: String, description: String) {

        var notificationManager =
            applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationChannel =
                NotificationChannel("101", "channel", NotificationManager.IMPORTANCE_DEFAULT)
            notificationManager.createNotificationChannel(notificationChannel)
        }

        val notificationBuilder = NotificationCompat.Builder(applicationContext, "101")
            .setContentTitle(title)
            .setContentText(description)
            .setSmallIcon(R.drawable.ic_launcher_background)

        notificationManager.notify(1, notificationBuilder.build())

    }




}

